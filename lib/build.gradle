apply plugin: 'com.android.library'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    // filter in the api credentials before building but without changing original source files - to make sure the
    // credentials are not checked into source control. This is used by the tests only, the credentials
    // are taken from the CLOUDINARY_URL environment variable or the cloudinaryUrl property
    testVariants.all { variant ->
        variant.outputs.each { output ->
            output.processManifest.doLast {
                def url = System.getenv('CLOUDINARY_URL') ?: project.findProperty("cloudinary.url")
                if (!url) {
                    throw new GradleException("Missing credentials: please set CLOUDINARY_URL environment variable or cloudianryUrl build property.")
                }
                filterManifest("${buildDir}/intermediates/manifest/${variant.dirName}/AndroidManifest.xml", url)
            }
        }
    }
}

dependencies {
    api "com.cloudinary:cloudinary-core:${cloudinaryLibsVersion}"

    def work_version = "1.0.0-alpha07"

    api("android.arch.work:work-runtime:$work_version") {
//        exclude group: 'com.android.support'
    }

    api "androidx.collection:collection:1.0.0-rc02"

    implementation "androidx.core:core:1.0.0-rc02"

    testImplementation 'junit:junit:4.12'
    testImplementation "com.cloudinary:cloudinary-test-common:${cloudinaryLibsVersion}"

    androidTestImplementation 'org.awaitility:awaitility:3.0.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'

    androidTestImplementation "androidx.annotation:annotation:1.0.0-rc02"
    androidTestImplementation "androidx.test:runner:1.1.0-alpha4"
    androidTestImplementation "androidx.test:rules:1.1.0-alpha4"
    androidTestImplementation "org.hamcrest:hamcrest-library:1.3"
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: publishRepo) {
                authentication(userName: project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : "", password: project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : "")
            }

            snapshotRepository(url: snapshotRepo) {
                authentication(userName: project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : "", password: project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : "")
            }

            pom.project {
                groupId publishGroupId
                artifactId 'cloudinary-android'
                name 'Cloudinary Android Library'
                description publishDescription
                packaging 'aar'
                version version

                url githubUrl

                scm {
                    connection scmConnection
                    developerConnection scmDeveloperConnection
                    url scmUrl
                }

                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
            }

            pom.whenConfigured { pom ->
                pom.dependencies.forEach { dep ->
                    if (dep.getVersion() == "unspecified") {
                        dep.setGroupId(publishGroupId)
                        dep.setVersion(version)
                    }
                }
            }
        }
    }
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { var -> classpath += var.javaCompiler.classpath }
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
